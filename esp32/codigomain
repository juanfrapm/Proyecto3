#include "secrets.h"
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "WiFi.h"
//Biblioteca RF
#include <RCSwitch.h>

//Definicion AWS
#define AWS_IOT_PUBLISH_TOPIC "ESP32/pub"
#define AWS_IOT_SUBSCRIBE_TOPIC "ESP32/sub"
//Definicion receptor RF
RCSwitch mySwitch = RCSwitch();

float presion = 0;
float t = 0;

WiFiClientSecure net = WiFiClientSecure();
PubSubClient client(net);

void connectAWS() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.println("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Configure WiFiClientSecure to use the AWS IoT device credentials
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);

  // Connect to the MQTT broker on the AWS endpoint we defined earlier
  client.setServer(AWS_IOT_ENDPOINT, 8883);

  // Create a message handler
  client.setCallback(messageHandler);

  Serial.println("Connecting to AWS IOT");

  while (!client.connect(THINGNAME)) {
    Serial.print(".");
    delay(100);
  }

  if (!client.connected()) {
    Serial.println("AWS IoT Timeout!");
    return;
  }

  // Subscribe to a topic
  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);

  Serial.println("AWS IoT Connected!");
}

void publishMessage() {
  StaticJsonDocument<60> doc;
  doc["presion"] = presion;
  doc["t"] = t;
  char jsonBuffer[256];
  serializeJson(doc, jsonBuffer);  // print to client

  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
}

void messageHandler(char* topic, byte* payload, unsigned int length) {
  Serial.print("incoming: ");
  Serial.println(topic);

  StaticJsonDocument<200> doc;
  deserializeJson(doc, payload);
  const char* message = doc["message"];
  Serial.println(message);
}

void setup() {
  Serial.begin(115200);
  connectAWS();
  //Para RF
   mySwitch.enableReceive(16); // Pin donde esta el receptor
}

void loop() {
  
 // t=t+1;
  

  //Para RF
  if (mySwitch.available()) {
    Serial.print("Código recibido: ");
    presion=mySwitch.getReceivedValue();
    //Serial.println(mySwitch.getReceivedValue());
    mySwitch.resetAvailable();
  }
  //AWS


  Serial.print(F("presion: "));
  Serial.print(presion);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(F("°C "));

  publishMessage();
  client.loop();
  delay(1000);
}
